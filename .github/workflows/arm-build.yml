name: ARM Build Workflow

# 这个工作流可以手动触发
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 0.1.0)'
        required: true
        default: '0.1.1'
      clean_cache:
        description: '清除缓存 (yes/no)'
        required: false
        default: 'no'

jobs:
  # 构建 ARM64 版本
  build-arm64:
    runs-on: ubuntu-latest
    timeout-minutes: 240  # 增加超时时间到4小时
    steps:
      - uses: actions/checkout@v4

      - name: Clear Docker cache
        if: ${{ github.event.inputs.clean_cache == 'yes' }}
        run: |
          docker buildx prune -af
          echo "已清除 Docker 构建缓存"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Set version
        run: echo "APP_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Build ARM64 with Docker Buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/arm64.Dockerfile
          platforms: linux/arm64
          push: false
          load: true
          tags: arm64-build:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker
          no-cache: ${{ github.event.inputs.clean_cache == 'yes' }}

      - name: Debug - List Docker images
        run: docker images

      - name: Extract artifacts from container
        run: |
          echo "Creating container from built image..."
          docker create --name arm64-container arm64-build:latest
          
          echo "Creating output directories..."
          mkdir -p output/deb output/appimage
          
          echo "Listing source directories in container..."
          docker exec arm64-container ls -la /app/src-tauri/target/release/bundle/ || echo "Directory not found"
          
          echo "Copying files from container..."
          docker cp arm64-container:/app/src-tauri/target/release/bundle/deb/. output/deb/ || echo "Failed to copy DEB files"
          docker cp arm64-container:/app/src-tauri/target/release/bundle/appimage/. output/appimage/ || echo "Failed to copy AppImage files"
          
          echo "Listing extracted files..."
          find output -type f
          
          echo "Cleaning up container..."
          docker rm -f arm64-container

      - name: Upload ARM64 DEB package
        uses: actions/upload-artifact@v4
        with:
          name: arm64-deb-package
          path: output/deb/*
          if-no-files-found: warn

      - name: Upload ARM64 AppImage package
        uses: actions/upload-artifact@v4
        with:
          name: arm64-appimage-package
          path: output/appimage/*
          if-no-files-found: warn

  # 构建 ARMv7 版本
  build-armv7:
    runs-on: ubuntu-latest
    timeout-minutes: 240  # 增加超时时间到4小时
    steps:
      - uses: actions/checkout@v4

      - name: Clear Docker cache
        if: ${{ github.event.inputs.clean_cache == 'yes' }}
        run: |
          docker buildx prune -af
          echo "已清除 Docker 构建缓存"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Set version
        run: echo "APP_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Verify Dockerfile content
        run: |
          echo "================ ARMv7 Dockerfile 内容 ================"
          cat .github/workflows/armv7.Dockerfile
          echo "===================================================="

      - name: Create fresh Dockerfile
        run: |
          cat > .github/workflows/armv7_fresh.Dockerfile << 'EOF'
          FROM --platform=linux/arm/v7 ubuntu:22.04

          # 安装依赖
          RUN apt-get update && apt-get install -y \
              curl \
              build-essential \
              libssl-dev \
              libgtk-3-dev \
              libwebkit2gtk-4.1-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              patchelf \
              libfuse2 \
              file \
              pkg-config \
              git \
              jq \
              ca-certificates \
              wget

          # 安装 Rust
          RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # 安装 Node.js
          RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          RUN apt-get install -y nodejs

          # 安装 pnpm
          RUN npm install -g pnpm@8

          # 设置工作目录
          WORKDIR /app
          COPY . .

          # 安装项目依赖
          RUN pnpm install

          # 使用预设置的环境变量禁用更新检查和其他可能导致问题的选项
          ENV TAURI_SKIP_UPDATE_CHECK=true
          ENV CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse 
          ENV HOME=/root

          # 优化 Rust 构建以使用更少的内存
          ENV CARGO_BUILD_JOBS=1
          ENV CARGO_NET_RETRY=5

          # 构建应用 - 分步骤执行以减少内存使用
          RUN pnpm run build
          RUN cd src-tauri && cargo build --release --verbose

          # 单独执行打包步骤
          RUN cd src-tauri && cargo tauri build

          # 保持容器运行以便提取文件
          CMD ["sleep", "infinity"]
          EOF
          
          echo "已创建新的 Dockerfile"

      - name: Build ARMv7 with Docker Buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/armv7_fresh.Dockerfile
          platforms: linux/arm/v7
          push: false
          load: true
          tags: armv7-build:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker
          no-cache: true

      - name: Debug - List Docker images
        run: docker images

      - name: Extract artifacts from container
        run: |
          echo "Creating container from built image..."
          docker create --name armv7-container armv7-build:latest
          
          echo "Creating output directories..."
          mkdir -p output/deb output/appimage
          
          echo "Listing source directories in container..."
          docker exec armv7-container ls -la /app/src-tauri/target/release/bundle/ || echo "Directory not found"
          
          echo "Copying files from container..."
          docker cp armv7-container:/app/src-tauri/target/release/bundle/deb/. output/deb/ || echo "Failed to copy DEB files"
          docker cp armv7-container:/app/src-tauri/target/release/bundle/appimage/. output/appimage/ || echo "Failed to copy AppImage files"
          
          echo "Listing extracted files..."
          find output -type f
          
          echo "Cleaning up container..."
          docker rm -f armv7-container

      - name: Upload ARMv7 DEB package
        uses: actions/upload-artifact@v4
        with:
          name: armv7-deb-package
          path: output/deb/*
          if-no-files-found: warn

      - name: Upload ARMv7 AppImage package
        uses: actions/upload-artifact@v4
        with:
          name: armv7-appimage-package
          path: output/appimage/*
          if-no-files-found: warn 