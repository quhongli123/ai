name: 'Publish Linux Arm builds'

on:
  workflow_dispatch:
  push:
    tag:
      - v*

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        arch: [arm64, armhf]
        include:
          - arch: arm64
            platform: linux/arm64
            deb: arm64
            rpm: aarch64
            appimage: aarch64
          - arch: armhf
            platform: linux/arm/v7
            deb: armhf
            rpm: armhf
            appimage: armhf

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Build in Docker
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg DEBIAN_FRONTEND=noninteractive \
            -f - . << EOF
          FROM ubuntu:22.04
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
            curl \
            build-essential \
            libssl-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libfuse2 \
            file \
            nodejs \
            npm \
            git

          # Install pnpm
          RUN npm install -g pnpm@8

          WORKDIR /build
          COPY . .
          
          # Install Rust
          RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"
          
          # Install dependencies with verbose logging
          RUN pnpm install --no-frozen-lockfile
          
          # Build the application
          RUN pnpm run tauri build -- --verbose
          EOF

      - name: Get app version
        run: echo "APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV

      - name: Upload deb bundle
        uses: actions/upload-artifact@v4
        with:
          name: Debian Bundle
          path: src-tauri/target/release/bundle/deb/*_${{ matrix.deb }}.deb

      - name: Upload rpm bundle
        uses: actions/upload-artifact@v4
        with:
          name: RPM Bundle
          path: src-tauri/target/release/bundle/rpm/*.${{ matrix.rpm }}.rpm

      - name: Upload appimage bundle
        uses: actions/upload-artifact@v4
        with:
          name: AppImage Bundle
          path: src-tauri/target/release/bundle/appimage/*_${{ matrix.appimage }}.AppImage