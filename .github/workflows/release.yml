# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI

# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}

    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, ubuntu-arm64]
        include:
          - platform: ubuntu-arm64
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi5-ARMv8-Bookworm.img.xz
            arch: aarch64
            deb: arm64
            appimage: aarch64

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v1

      - name: Build app
        if: matrix.platform == 'ubuntu-arm64'
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          commands: |
            export HOME=/root
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            
            # 更新系统并安装依赖
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends --no-install-suggests \
              curl \
              libwebkit2gtk-4.1-dev \
              build-essential \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              patchelf \
              libfuse2 \
              file \
              pkg-config \
              libglib2.0-dev \
              libcairo2-dev \
              libpango1.0-dev \
              libatk1.0-dev \
              libgdk-pixbuf2.0-dev \
              libsoup2.4-dev \
              libgstreamer1.0-dev \
              libgstreamer-plugins-base1.0-dev \
              libglib2.0-0 \
              libglib2.0-bin \
              libglib2.0-data \
              libglib2.0-dev-bin
            
            # 设置环境变量
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
            export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
            export PKG_CONFIG_SYSROOT_DIR=/
            
            # 验证 pkg-config 设置
            echo "Current PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
            pkg-config --list-all | grep glib-2.0
            
            # 安装 Rust
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            
            # 安装 Node.js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs
            
            # 构建应用
            pnpm install
            pnpm pubhome

      - name: Build app (non-ARM)
        if: matrix.platform != 'ubuntu-arm64'
        run: pnpm install && pnpm pubhome

      - name: Get app version
        run: echo "APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV

      - name: Rename Artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            mv "macos/AI 学院.app" "macos/app.app"
            mv "dmg/AI 学院_${APP_VERSION}_aarch64.dmg" "dmg/app_${APP_VERSION}_arm64.dmg"
            cd macos
            tar -czf app.app.tar.gz app.app
          elif [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            cd appimage
            mv "AI 学院_${APP_VERSION}_amd64.AppImage" "app_${APP_VERSION}_amd64.AppImage"
            tar -czf app_${APP_VERSION}_amd64.AppImage.tar.gz app_${APP_VERSION}_amd64.AppImage
          elif [[ "${{ matrix.platform }}" == "ubuntu-arm64" ]]; then
            cd appimage
            mv "AI 学院_${APP_VERSION}_${matrix.appimage}.AppImage" "app_${APP_VERSION}_${matrix.appimage}.AppImage"
            tar -czf app_${APP_VERSION}_${matrix.appimage}.AppImage.tar.gz app_${APP_VERSION}_${matrix.appimage}.AppImage
          fi

      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true
