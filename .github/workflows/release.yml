# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI
 
# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
 
# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
 
    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
 
      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest]
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: amd64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      # 使用 pnpm 缓存
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 安装 Rust
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v1

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" == "aarch64" ]; then
            # 添加 ARM64 架构支持
            sudo dpkg --add-architecture arm64
            # 配置 ARM64 软件源
            sudo tee /etc/apt/sources.list.d/arm64.list << 'EOT'
            deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted universe multiverse
            deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted universe multiverse
            deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse
            deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security main restricted universe multiverse
            EOT
            sudo apt-get update
            # 安装 ARM64 交叉编译工具链
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            # 安装 ARM64 系统库
            sudo apt-get install -y \
              libgtk-3-dev:arm64 \
              libwebkit2gtk-4.0-dev:arm64 \
              libappindicator3-dev:arm64 \
              librsvg2-dev:arm64 \
              patchelf:arm64
            # 设置 ARM64 交叉编译环境变量
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" == "armv7l" ]; then
            # 添加 ARMv7 架构支持
            sudo dpkg --add-architecture armhf
            # 配置 ARMv7 软件源
            sudo tee /etc/apt/sources.list.d/armhf.list << 'EOT'
            deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted universe multiverse
            deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted universe multiverse
            deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse
            deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble-security main restricted universe multiverse
            EOT
            sudo apt-get update
            # 安装 ARMv7 交叉编译工具链
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
            # 安装 ARMv7 系统库
            sudo apt-get install -y \
              libgtk-3-dev:armhf \
              libwebkit2gtk-4.0-dev:armhf \
              libappindicator3-dev:armhf \
              librsvg2-dev:armhf \
              patchelf:armhf
            # 设置 ARMv7 交叉编译环境变量
            echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf" >> $GITHUB_ENV
          else
            # 安装 AMD64 依赖
            sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          fi
          # 验证 pkg-config 设置
          pkg-config --list-all

      # 可选，如果需要将 Rust 编译为 wasm，则安装 wasm-pack
      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: v0.9.1

      # 可选，如果需要使用 rsw 构建 wasm，则安装 rsw
      - name: Install rsw
        run: cargo install rsw

      # 安装依赖执行构建，以及推送 github release
      - name: Install app dependencies and build it
        run: |
          pnpm install
          if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            pnpm run build
            cd src-tauri
            if [ "${{ matrix.arch }}" == "aarch64" ]; then
              cargo build --target aarch64-unknown-linux-gnu --release
              cd ..
              npx tauri build --target aarch64-unknown-linux-gnu
            elif [ "${{ matrix.arch }}" == "armv7l" ]; then
              cargo build --target armv7-unknown-linux-gnueabihf --release
              cd ..
              npx tauri build --target armv7-unknown-linux-gnueabihf
            else
              cargo build --target x86_64-unknown-linux-gnu --release
              cd ..
              npx tauri build --target x86_64-unknown-linux-gnu
            fi
          else
            pnpm pubhome
          fi

      - name: Rename artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            # macOS 重命名
            mv "macos/AI 学院.app" "macos/app.app"
            mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_0.1.0_arm64.dmg"
            cd macos
            tar -czf app.app.tar.gz app.app
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "aarch64" ]; then
              cd ../aarch64-unknown-linux-gnu/release/bundle
              # Linux ARM64 重命名
              mv "deb/AI 学院_0.1.0_arm64.deb" "deb/app_0.1.0_arm64.deb"
              mv "appimage/AI 学院_0.1.0_arm64.AppImage" "appimage/app_0.1.0_arm64.AppImage"
              cd appimage
              tar -czf app_0.1.0_arm64.AppImage.tar.gz app_0.1.0_arm64.AppImage
            elif [ "${{ matrix.arch }}" == "armv7l" ]; then
              cd ../armv7-unknown-linux-gnueabihf/release/bundle
              # Linux ARMv7 重命名
              mv "deb/AI 学院_0.1.0_armhf.deb" "deb/app_0.1.0_armhf.deb"
              mv "appimage/AI 学院_0.1.0_armhf.AppImage" "appimage/app_0.1.0_armhf.AppImage"
              cd appimage
              tar -czf app_0.1.0_armhf.AppImage.tar.gz app_0.1.0_armhf.AppImage
            else
              # Linux AMD 重命名
              mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_amd64.deb"
              mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_amd64.AppImage"
              cd appimage
              tar -czf app_0.1.0_amd64.AppImage.tar.gz app_0.1.0_amd64.AppImage
            fi
          fi

      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true