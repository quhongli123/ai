# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI
 
# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
 
# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
 
    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
 
      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest]
        arch: [x64, arm64]
 
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      # 使用 pnpm 缓存
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      # 安装 Rust
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.arch == 'arm64' && 'aarch64-unknown-linux-gnu' || '' }}
 
      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v1
 
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          # 设置 PKG_CONFIG_PATH
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          # 验证 pkg-config 设置
          pkg-config --list-all | grep javascriptcoregtk
      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装 WiX 工具集
          $WIX_VERSION = "3.14.0"
          $WIX_URL = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip"
          $WIX_PATH = "C:\wix"
          
          # 确保目录存在
          if (-not (Test-Path $WIX_PATH)) {
              New-Item -ItemType Directory -Force -Path $WIX_PATH
          }
          
          # 下载并解压 WiX
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $WIX_URL -OutFile "$WIX_PATH\wix.zip"
          Expand-Archive -Path "$WIX_PATH\wix.zip" -DestinationPath $WIX_PATH -Force
          
          # 设置环境变量
          $env:PATH = "$WIX_PATH;$env:PATH"
          $env:WIX = $WIX_PATH
          
          # 验证安装
          Write-Host "Verifying WiX installation..."
          if (Test-Path "$WIX_PATH\candle.exe") {
              Write-Host "candle.exe found at $WIX_PATH\candle.exe"
              & "$WIX_PATH\candle.exe" -version
          } else {
              Write-Error "candle.exe not found"
          }
          
          if (Test-Path "$WIX_PATH\light.exe") {
              Write-Host "light.exe found at $WIX_PATH\light.exe"
              & "$WIX_PATH\light.exe" -version
          } else {
              Write-Error "light.exe not found"
          }
          
          # 设置 Tauri 的 WiX 路径
          $env:TAURI_WIX_DIR = $WIX_PATH
      # 可选，如果需要将 Rust 编译为 wasm，则安装 wasm-pack
      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
          version: v0.9.1
 
      # 可选，如果需要使用 rsw 构建 wasm，则安装 rsw
      - name: Install rsw
        run: cargo install rsw
 
      # 安装依赖执行构建，以及推送 github release
      - name: Install app dependencies and build it
        run: pnpm install && pnpm pubhome

      - name: Rename artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            # macOS 重命名
            if [ "${{ matrix.arch }}" == "x64" ]; then
              if [ -f "macos/AI 学院.app" ]; then
                mv "macos/AI 学院.app" "macos/app.app"
              fi
              if [ -f "dmg/AI 学院_0.1.0_x64.dmg" ]; then
                mv "dmg/AI 学院_0.1.0_x64.dmg" "dmg/app_0.1.0_x64.dmg"
              fi
              cd macos
              if [ -f "app.app" ]; then
                tar -czf app.app.tar.gz app.app
                # 生成签名文件
                openssl dgst -sha256 -sign /Users/runner/work/ai/ai/src-tauri/target/release/app.app.tar.gz > app.app.tar.gz.sig
              fi
            else
              if [ -f "macos/AI 学院.app" ]; then
                mv "macos/AI 学院.app" "macos/app.app"
              fi
              if [ -f "dmg/AI 学院_0.1.0_aarch64.dmg" ]; then
                mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_0.1.0_arm64.dmg"
              fi
              cd macos
              if [ -f "app.app" ]; then
                tar -czf app.app.tar.gz app.app
                # 生成签名文件
                openssl dgst -sha256 -sign /Users/runner/work/ai/ai/src-tauri/target/release/app.app.tar.gz > app.app.tar.gz.sig
              fi
            fi
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            # Linux 重命名
            if [ "${{ matrix.arch }}" == "x64" ]; then
              if [ -f "deb/AI 学院_0.1.0_amd64.deb" ]; then
                mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_amd64.deb"
              fi
              if [ -f "rpm/AI 学院-0.1.0-1.x86_64.rpm" ]; then
                mv "rpm/AI 学院-0.1.0-1.x86_64.rpm" "rpm/app-0.1.0-1.x86_64.rpm"
              fi
              if [ -f "appimage/AI 学院_0.1.0_amd64.AppImage" ]; then
                mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_amd64.AppImage"
              fi
              cd appimage
              if [ -f "app_0.1.0_amd64.AppImage" ]; then
                tar -czf app_0.1.0_amd64.AppImage.tar.gz app_0.1.0_amd64.AppImage
              fi
            else
              if [ -f "deb/AI 学院_0.1.0_amd64.deb" ]; then
                mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_arm64.deb"
              fi
              if [ -f "rpm/AI 学院-0.1.0-1.x86_64.rpm" ]; then
                mv "rpm/AI 学院-0.1.0-1.x86_64.rpm" "rpm/app-0.1.0-1.aarch64.rpm"
              fi
              if [ -f "appimage/AI 学院_0.1.0_amd64.AppImage" ]; then
                mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_arm64.AppImage"
              fi
              cd appimage
              if [ -f "app_0.1.0_arm64.AppImage" ]; then
                tar -czf app_0.1.0_arm64.AppImage.tar.gz app_0.1.0_arm64.AppImage
              fi
            fi
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            # Windows 重命名
            if [ -f "msi/AI 学院_0.1.0_x64_en-US.msi" ]; then
              mv "msi/AI 学院_0.1.0_x64_en-US.msi" "msi/app_0.1.0_x64_en-US.msi"
            fi
            if [ -f "nsis/AI 学院_0.1.0_x64-setup.exe" ]; then
              mv "nsis/AI 学院_0.1.0_x64-setup.exe" "nsis/app_0.1.0_x64-setup.exe"
            fi
          fi

      - name: List bundle directory
        run: |
          cd src-tauri/target/release/bundle
          echo "Listing bundle directory contents:"
          ls -R
          echo "Current working directory:"
          pwd

      - name: Verify artifacts
        run: |
          cd src-tauri/target/release/bundle
          echo "Verifying artifacts exist:"
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            if [ "${{ matrix.arch }}" == "x64" ]; then
              [ -f "macos/app.app" ] && echo "app.app exists" || echo "app.app does not exist"
              [ -f "dmg/app_0.1.0_x64.dmg" ] && echo "app_0.1.0_x64.dmg exists" || echo "app_0.1.0_x64.dmg does not exist"
              [ -f "macos/app.app.tar.gz" ] && echo "app.app.tar.gz exists" || echo "app.app.tar.gz does not exist"
              [ -f "macos/app.app.tar.gz.sig" ] && echo "app.app.tar.gz.sig exists" || echo "app.app.tar.gz.sig does not exist"
            else
              [ -f "macos/app.app" ] && echo "app.app exists" || echo "app.app does not exist"
              [ -f "dmg/app_0.1.0_arm64.dmg" ] && echo "app_0.1.0_arm64.dmg exists" || echo "app_0.1.0_arm64.dmg does not exist"
              [ -f "macos/app.app.tar.gz" ] && echo "app.app.tar.gz exists" || echo "app.app.tar.gz does not exist"
              [ -f "macos/app.app.tar.gz.sig" ] && echo "app.app.tar.gz.sig exists" || echo "app.app.tar.gz.sig does not exist"
            fi
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "x64" ]; then
              [ -f "deb/app_0.1.0_amd64.deb" ] && echo "app_0.1.0_amd64.deb exists" || echo "app_0.1.0_amd64.deb does not exist"
              [ -f "rpm/app-0.1.0-1.x86_64.rpm" ] && echo "app-0.1.0-1.x86_64.rpm exists" || echo "app-0.1.0-1.x86_64.rpm does not exist"
              [ -f "appimage/app_0.1.0_amd64.AppImage" ] && echo "app_0.1.0_amd64.AppImage exists" || echo "app_0.1.0_amd64.AppImage does not exist"
              [ -f "appimage/app_0.1.0_amd64.AppImage.tar.gz" ] && echo "app_0.1.0_amd64.AppImage.tar.gz exists" || echo "app_0.1.0_amd64.AppImage.tar.gz does not exist"
            else
              [ -f "deb/app_0.1.0_arm64.deb" ] && echo "app_0.1.0_arm64.deb exists" || echo "app_0.1.0_arm64.deb does not exist"
              [ -f "rpm/app-0.1.0-1.aarch64.rpm" ] && echo "app-0.1.0-1.aarch64.rpm exists" || echo "app-0.1.0-1.aarch64.rpm does not exist"
              [ -f "appimage/app_0.1.0_arm64.AppImage" ] && echo "app_0.1.0_arm64.AppImage exists" || echo "app_0.1.0_arm64.AppImage does not exist"
              [ -f "appimage/app_0.1.0_arm64.AppImage.tar.gz" ] && echo "app_0.1.0_arm64.AppImage.tar.gz exists" || echo "app_0.1.0_arm64.AppImage.tar.gz does not exist"
            fi
          fi
      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true