name: Build and Release CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # 使用 ARM 架构的 runner 进行编译
      - uses: pguyot/arm-runner-action@v2.5.2
        with:
          base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bullseye.7z
          cpu: cortex-a53
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: false
          commands: |
            export HOME=/root
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            apt-get update -y
            apt-get upgrade -y
            apt-get autoremove -y
            apt-get install curl
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash
            apt-get install -y nodejs
            npm install next@latest react@latest react-dom@latest eslint-config-next@latest
            apt-get install -y libwebkit2gtk-4.0-dev build-essential wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
            cargo install tauri-cli
            npm install
            cargo tauri build
      - name: Upload ARM64 deb bundle
        uses: actions/upload-artifact@v3
        with:
          name: ARM64 Debian Bundle
          path: ${{ github.workspace }}/target/release/bundle/deb/tauri_1.4_arm64.deb

  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v2
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.version }}'
          release_name: 'app ${{ steps.get_version.outputs.version }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, ubuntu-arm64]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'ubuntu-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          pkg-config --list-all | grep javascriptcoregtk
      - name: Install app dependencies and build it
        run: pnpm install && pnpm pubhome
      - name: Rename artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            mv "macos/AI 学院.app" "macos/app.app"
            mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_0.1.0_arm64.dmg"
            cd macos
            tar -czf app.app.tar.gz app.app
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_amd64.deb"
            mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_amd64.AppImage"
            cd appimage
            tar -czf app_0.1.0_amd64.AppImage.tar.gz app_0.1.0_amd64.AppImage
          elif [ "${{ matrix.platform }}" == "ubuntu-arm64" ]; then
            mv "deb/AI 学院_0.1.0_arm64.deb" "deb/app_0.1.0_arm64.deb"
            cd deb
            tar -czf app_0.1.0_arm64.deb.tar.gz app_0.1.0_arm64.deb
          fi
      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true
