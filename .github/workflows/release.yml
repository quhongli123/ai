# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI
 
# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
 
# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
      VERSION: ${{ steps.get_version.outputs.version }}
 
    steps:
      - uses: actions/checkout@v4
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo "version=${GITHUB_REF:10}" >> $GITHUB_OUTPUT
 
      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.version }}'
          release_name: 'app ${{ steps.get_version.outputs.version }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest]
 
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # 使用 pnpm 缓存
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      # 安装 Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
 
      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v2
 
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          # 设置 PKG_CONFIG_PATH
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          # 验证 pkg-config 设置
          pkg-config --list-all | grep javascriptcoregtk

      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装 WiX 工具集
          $WIX_VERSION = "3.14.0"
          $WIX_URL = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip"
          $WIX_PATH = "C:\wix"
          
          # 确保目录存在
          if (-not (Test-Path $WIX_PATH)) {
              New-Item -ItemType Directory -Force -Path $WIX_PATH
          }
          
          # 下载并解压 WiX
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $WIX_URL -OutFile "$WIX_PATH\wix.zip"
          Expand-Archive -Path "$WIX_PATH\wix.zip" -DestinationPath $WIX_PATH -Force
          
          # 设置环境变量
          $env:PATH = "$WIX_PATH;$env:PATH"
          $env:WIX = $WIX_PATH
          
          # 验证安装
          Write-Host "Verifying WiX installation..."
          if (Test-Path "$WIX_PATH\candle.exe") {
              Write-Host "candle.exe found at $WIX_PATH\candle.exe"
              & "$WIX_PATH\candle.exe" -version
          } else {
              Write-Error "candle.exe not found"
          }
          
          if (Test-Path "$WIX_PATH\light.exe") {
              Write-Host "light.exe found at $WIX_PATH\light.exe"
              & "$WIX_PATH\light.exe" -version
          } else {
              Write-Error "light.exe not found"
          }
          
          # 设置 Tauri 的 WiX 路径
          $env:TAURI_WIX_DIR = $WIX_PATH
      # 可选，如果需要将 Rust 编译为 wasm，则安装 wasm-pack
      - uses: jetli/wasm-pack-action@v0.4.0
        with:
          # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
          version: latest
 
      # 可选，如果需要使用 rsw 构建 wasm，则安装 rsw
      - name: Install rsw
        run: cargo install rsw
 
      # 安装依赖执行构建，以及推送 github release
      - name: Install app dependencies and build it
        run: pnpm install && pnpm pubhome

      - name: Rename artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            # macOS 重命名
            mv "macos/AI 学院.app" "macos/app.app"
            mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_0.1.0_arm64.dmg"
            cd macos
            tar -czf app.app.tar.gz app.app
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            # Linux 重命名
            mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_amd64.deb"
            mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_amd64.AppImage"
            cd appimage
            tar -czf app_0.1.0_amd64.AppImage.tar.gz app_0.1.0_amd64.AppImage
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            # Windows 重命名
            mv "msi/AI 学院_0.1.0_x64_en-US.msi" "msi/app_0.1.0_x64_en-US.msi"
            mv "nsis/AI 学院_0.1.0_x64-setup.exe" "nsis/app_0.1.0_x64-setup.exe"
          fi
      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true

  # 构建 ARM 架构版本
  build-arm:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        run: echo "APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV
      
      - name: Set up cross-compilation environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libssl-dev:arm64 \
            libwebkit2gtk-4.1-dev:arm64 \
            libgtk-3-dev:arm64 \
            libayatana-appindicator3-dev:arm64

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-unknown-linux-gnu,armv7-unknown-linux-gnueabihf

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Create ARM placeholders
        run: |
          mkdir -p arm-artifacts/arm64 arm-artifacts/armhf
          echo "ARM64 build placeholder - Generated from workflow ${{ github.workflow }} run ${{ github.run_id }}" > arm-artifacts/arm64/README.txt
          echo "ARMv7 build placeholder - Generated from workflow ${{ github.workflow }} run ${{ github.run_id }}" > arm-artifacts/armhf/README.txt
          
          # Create the placeholder files with the same names as the real artifacts would have
          echo "This is a placeholder. Real ARM64 builds need to be built on actual ARM hardware or using proper cross-compilation." > arm-artifacts/arm64/app_${{ env.APP_VERSION }}_arm64.deb
          echo "This is a placeholder. Real ARMv7 builds need to be built on actual ARM hardware or using proper cross-compilation." > arm-artifacts/armhf/app_${{ env.APP_VERSION }}_armhf.deb

      - name: Upload ARM64 placeholder
        uses: actions/upload-artifact@v4
        with:
          name: ARM64-placeholder
          path: arm-artifacts/arm64

      - name: Upload ARMv7 placeholder
        uses: actions/upload-artifact@v4
        with:
          name: ARMv7-placeholder
          path: arm-artifacts/armhf

      - name: Add placeholders to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.VERSION }}
          files: |
            arm-artifacts/arm64/app_${{ env.APP_VERSION }}_arm64.deb
            arm-artifacts/armhf/app_${{ env.APP_VERSION }}_armhf.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Add release note about ARM builds
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.VERSION }}
          body: |
            ## ARM 构建注意事项
            
            ARM 构建 (ARM64 和 ARMv7) 需要在专用的 ARM 设备上构建或使用适当的交叉编译环境。
            此发布版本包含 ARM 构建的占位符文件，表示 ARM 版本正在开发中。
            
            要获取真正的 ARM 构建版本，请使用以下方法之一：
            
            1. 在 Raspberry Pi 或其他 ARM 设备上克隆代码库并本地构建
            2. 设置专用的 ARM 构建服务器和 CI/CD 流程
            3. 联系项目维护者获取预构建的 ARM 版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}