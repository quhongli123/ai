# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI

# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}

    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, ubuntu-arm64]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v1

      - name: Set Target Architecture
        id: arch
        run: |
          if [[ "${{ matrix.platform }}" == "ubuntu-arm64" ]]; then
            echo "target=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT
            echo "arch=arm64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
            echo "arch=amd64" >> $GITHUB_OUTPUT
          else
            echo "arch=universal" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies (Ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            webkit2gtk-4.0 \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libjavascriptcoregtk-4.1-dev \
            libwebkit2gtk-4.1-dev \
            pkg-config \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libsoup2.4-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev
          
          # 设置 pkg-config 环境变量
          if [[ "${{ matrix.platform }}" == "ubuntu-arm64" ]]; then
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
            echo "HOST_PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "HOST_PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
          else
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_LIBDIR=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
            echo "HOST_PKG_CONFIG_LIBDIR=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "HOST_PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
          fi

          # 验证 pkg-config 设置
          echo "Current PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "Current PKG_CONFIG_LIBDIR: $PKG_CONFIG_LIBDIR"
          pkg-config --list-all | grep glib-2.0

      - name: Install cross (for ARM64)
        if: matrix.platform == 'ubuntu-arm64'
        run: cargo install cross

      - name: Install rsw
        run: cargo install rsw

      - name: Build Application
        run: |
          if [[ "${{ matrix.platform }}" == "ubuntu-arm64" ]]; then
            cd src-tauri
            cross build --release --target aarch64-unknown-linux-gnu
          else
            pnpm install && pnpm pubhome
          fi

      - name: Rename Artifacts
        run: |
          VERSION=${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          ARCH=${{ steps.arch.outputs.arch }}
          cd src-tauri/target/release/bundle

          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            mv "macos/AI 学院.app" "macos/app.app"
            mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_${VERSION}_arm64.dmg"
            cd macos
            tar -czf app.app.tar.gz app.app
          elif [[ "${{ matrix.platform }}" == "ubuntu-latest" || "${{ matrix.platform }}" == "ubuntu-arm64" ]]; then
            cd appimage
            mv "AI 学院_${VERSION}_${ARCH}.AppImage" "app_${VERSION}_${ARCH}.AppImage"
            tar -czf app_${VERSION}_${ARCH}.AppImage.tar.gz app_${VERSION}_${ARCH}.AppImage
          fi

      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true
