name: Release CI

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}

    steps:
      - uses: actions/checkout@v2
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            arch: x64
          - platform: macos-latest
            arch: arm64
          - platform: ubuntu-latest
            arch: x64
          - platform: ubuntu-latest
            arch: arm64
          - platform: windows-latest
            arch: x64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v1

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          pkg-config --list-all | grep javascriptcoregtk

      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          $WIX_VERSION = "3.14.0"
          $WIX_URL = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip"
          $WIX_PATH = "C:\wix"
          
          if (-not (Test-Path $WIX_PATH)) {
              New-Item -ItemType Directory -Force -Path $WIX_PATH
          }
          
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $WIX_URL -OutFile "$WIX_PATH\wix.zip"
          Expand-Archive -Path "$WIX_PATH\wix.zip" -DestinationPath $WIX_PATH -Force
          
          $env:PATH = "$WIX_PATH;$env:PATH"
          $env:WIX = $WIX_PATH
          $env:TAURI_WIX_DIR = $WIX_PATH

      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: v0.9.1

      - name: Install rsw
        run: cargo install rsw

      - name: Install app dependencies and build it
        run: pnpm install && pnpm pubhome

      - name: Rename artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            if [ "${{ matrix.arch }}" == "x64" ]; then
              mv "macos/AI 学院.app" "macos/app_x64.app"
              mv "dmg/AI 学院_0.1.0_x64.dmg" "dmg/app_0.1.0_x64.dmg"
              cd macos
              tar -czf app_x64.app.tar.gz app_x64.app
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              mv "macos/AI 学院.app" "macos/app_arm64.app"
              mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_0.1.0_arm64.dmg"
              cd macos
              tar -czf app_arm64.app.tar.gz app_arm64.app
            fi
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "x64" ]; then
              mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_amd64.deb"
              mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_amd64.AppImage"
              cd appimage
              tar -czf app_0.1.0_amd64.AppImage.tar.gz app_0.1.0_amd64.AppImage
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              if [ -f "deb/AI 学院_0.1.0_arm64.deb" ]; then
                mv "deb/AI 学院_0.1.0_arm64.deb" "deb/app_0.1.0_arm64.deb"
              fi
              if [ -f "appimage/AI 学院_0.1.0_arm64.AppImage" ]; then
                mv "appimage/AI 学院_0.1.0_arm64.AppImage" "appimage/app_0.1.0_arm64.AppImage"
                cd appimage
                tar -czf app_0.1.0_arm64.AppImage.tar.gz app_0.1.0_arm64.AppImage
              fi
            fi
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            mv "msi/AI 学院_0.1.0_x64_en-US.msi" "msi/app_0.1.0_x64_en-US.msi"
            mv "nsis/AI 学院_0.1.0_x64-setup.exe" "nsis/app_0.1.0_x64-setup.exe"
          fi

      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true