name: Release CI

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: 'See the assets to download this version.'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-tauri:
    needs: create-release
    strategy:
      matrix:
        platform: 
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.platform.os }}

    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev \
            patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          if [ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - uses: Swatinem/rust-cache@v1

      - name: Install and build
        run: |
          pnpm install
          pnpm pubhome

      - name: Build Tauri for target
        run: |
          cd src-tauri
          cargo build --release --target ${{ matrix.platform.target }}

      - name: Package artifact
        run: |
          cd src-tauri/target/${{ matrix.platform.target }}/release
          if [ "${{ matrix.platform.os }}" == "macos-latest" ]; then
            # macOS packaging
            cd ../bundle/dmg
            tar -czf app_${{ needs.create-release.outputs.version }}_macos.dmg.tar.gz *.dmg
          elif [ "${{ matrix.platform.os }}" == "ubuntu-latest" ]; then
            # Linux packaging
            if [ "${{ matrix.platform.target }}" == "x86_64-unknown-linux-gnu" ]; then
              cd ../bundle/appimage
              tar -czf app_${{ needs.create-release.outputs.version }}_linux_x64.AppImage.tar.gz *.AppImage
            elif [ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-gnu" ]; then
              # For ARM, you might need to adjust the packaging method
              # This example just creates a tarball of the binary
              tar -czf app_${{ needs.create-release.outputs.version }}_linux_arm64.tar.gz your_app_name
            fi
          fi

      - name: Upload artifact
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/**/app_*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}