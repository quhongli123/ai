# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI
 
# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
 
# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
 
    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
 
      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
    build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            arch: amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - platform: macos-arm64
            arch: arm64
            runner: macos-14
            target: aarch64-apple-darwin
          - platform: ubuntu-latest
            arch: amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: ubuntu-arm64
            arch: arm64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v2

      - name: Query version number
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v1

      - name: Install cross (for Linux arm64)
        if: matrix.arch == 'arm64' && matrix.runner == 'ubuntu-latest'
        run: cargo install cross

      - name: Install dependencies (Linux only)
        if: matrix.runner == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

      - name: Install app dependencies and build
        run: pnpm install

      - name: Build Tauri app
        run: |
          if [ "${{ matrix.runner }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            cross build --release --target=${{ matrix.target }}
          else
            pnpm tauri build --target ${{ matrix.target }}
          fi

      - name: Rename and archive artifacts
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          APP_NAME="AI 学院"
          cd src-tauri/target/${{ matrix.target }}/release/bundle || cd src-tauri/target/release/bundle

          # macOS
          if [[ "${{ matrix.target }}" == *"apple-darwin" ]]; then
            mkdir -p artifacts
            find dmg -name "*.dmg" -exec cp {} artifacts/app_${VERSION}_${{ matrix.arch }}.dmg \;
            find macos -name "*.app" -exec tar -czf artifacts/app_${VERSION}_${{ matrix.arch }}.app.tar.gz {} \;

          # Linux
          elif [[ "${{ matrix.target }}" == *"linux-gnu" ]]; then
            mkdir -p artifacts
            find deb -name "*.deb" -exec cp {} artifacts/app_${VERSION}_${{ matrix.arch }}.deb \;
            find appimage -name "*.AppImage" -exec tar -czf artifacts/app_${VERSION}_${{ matrix.arch }}.AppImage.tar.gz {} \;

          fi

      - name: Upload to GitHub Release
        uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true
