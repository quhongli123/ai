# 可选，将显示在 GitHub 存储库的"操作"选项卡中的工作流名称
name: Release CI
 
# 指定此工作流的触发器
on:
  push:
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
 
# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
 
    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
 
      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest]
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: amd64
          - platform: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
          - platform: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
        arch: armhf

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      # 使用 pnpm 缓存
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 安装 Rust
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v1

      # 安装 tauri-cross
      - name: Install tauri-cross
        run: cargo install tauri-cross

      # 安装依赖执行构建，以及推送 github release
      - name: Install app dependencies and build it
        run: |
          pnpm install
          if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            pnpm run build
            cd src-tauri
            if [ "${{ matrix.arch }}" == "arm64" ]; then
              tauri-cross build --target aarch64-unknown-linux-gnu --release
            else
              tauri-cross build --target x86_64-unknown-linux-gnu --release
            fi
          else
            pnpm pubhome
          fi

      - name: Rename artifacts
        run: |
          cd src-tauri/target/release/bundle
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            # macOS 重命名
            mv "macos/AI 学院.app" "macos/app.app"
            mv "dmg/AI 学院_0.1.0_aarch64.dmg" "dmg/app_0.1.0_arm64.dmg"
            cd macos
            tar -czf app.app.tar.gz app.app
          elif [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "arm64" ]; then
              cd ../aarch64-unknown-linux-gnu/release/bundle
              # Linux ARM64 重命名
              mv "deb/AI 学院_0.1.0_arm64.deb" "deb/app_0.1.0_arm64.deb"
              mv "appimage/AI 学院_0.1.0_arm64.AppImage" "appimage/app_0.1.0_arm64.AppImage"
              cd appimage
              tar -czf app_0.1.0_arm64.AppImage.tar.gz app_0.1.0_arm64.AppImage
            else
              # Linux AMD 重命名
              mv "deb/AI 学院_0.1.0_amd64.deb" "deb/app_0.1.0_amd64.deb"
              mv "appimage/AI 学院_0.1.0_amd64.AppImage" "appimage/app_0.1.0_amd64.AppImage"
              cd appimage
              tar -czf app_0.1.0_amd64.AppImage.tar.gz app_0.1.0_amd64.AppImage
            fi
          fi

      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          includeDebugArtifacts: true
          releaseDraft: false
          prerelease: false
          publish: true