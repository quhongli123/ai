name: 'publish'

# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get-version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          draft: true
          prerelease: false

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'ubuntu-22.04'
            args: '--target aarch64-unknown-linux-gnu'
            is_arm: true
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bookworm.img.xz
          - platform: 'ubuntu-22.04'
            args: '--target armv7-unknown-linux-gnueabihf'
            is_arm: true
            cpu: cortex-a53
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: ${{ matrix.platform == 'ubuntu-22.04' && !matrix.is_arm }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build app (ARM)
        if: ${{ matrix.is_arm }}
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          commands: |
            export HOME=/root
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends --no-install-suggests curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs
            npm install
            npm run tauri build -- --verbose

      - name: setup pnpm
        if: ${{ !matrix.is_arm }}
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: setup node
        if: ${{ !matrix.is_arm }}
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        if: ${{ !matrix.is_arm }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        if: ${{ !matrix.is_arm }}
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        if: ${{ !matrix.is_arm }}
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        if: ${{ !matrix.is_arm }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          artifactName: ${{ matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin' && 'AI 学院_${version}_macos_arm64.dmg' || matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin' && 'AI 学院_${version}_macos_x64.dmg' || matrix.platform == 'ubuntu-22.04' && 'AI 学院_${version}_linux_x64.deb' }}

      - name: Upload ARM artifacts
        if: ${{ matrix.is_arm }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.args == '--target aarch64-unknown-linux-gnu' && 'ARM64 Bundle' || 'ARMv7 Bundle' }}
          path: |
            ${{ github.workspace }}/src-tauri/target/release/bundle/deb/AI 学院_${{ needs.create-release.outputs.version }}_linux_${{ matrix.args == '--target aarch64-unknown-linux-gnu' && 'arm64' || 'armhf' }}.deb
            ${{ github.workspace }}/src-tauri/target/release/bundle/rpm/AI 学院-${{ needs.create-release.outputs.version }}-1.${{ matrix.args == '--target aarch64-unknown-linux-gnu' && 'aarch64' || 'arm' }}.rpm
            ${{ github.workspace }}/src-tauri/target/release/bundle/appimage/AI 学院_${{ needs.create-release.outputs.version }}_linux_${{ matrix.args == '--target aarch64-unknown-linux-gnu' && 'aarch64' || 'armhf' }}.AppImage