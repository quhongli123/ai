name: Release CI

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.version }}
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}

    steps:
      - uses: actions/checkout@v2

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.version }}'
          release_name: 'app ${{ steps.get_version.outputs.version }}'
          body: 'See the assets to download this version and install.'
          draft: false
          prerelease: false

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Install platform-specific dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          $WIX_PATH = "C:\wix"
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip" -OutFile "$WIX_PATH\wix.zip"
          Expand-Archive -Path "$WIX_PATH\wix.zip" -DestinationPath $WIX_PATH
          echo "$WIX_PATH" | Out-File -Append -FilePath $env:GITHUB_PATH
          echo "WIX=$WIX_PATH" >> $env:GITHUB_ENV
          echo "TAURI_WIX_DIR=$WIX_PATH" >> $env:GITHUB_ENV

      - name: Build frontend
        run: pnpm install && pnpm pubhome

      - name: Build Tauri App
        run: pnpm tauri build

      - name: Rename & package artifacts
        run: |
          VERSION="${{ needs.create-release.outputs.VERSION }}"
          cd src-tauri/target/release/bundle

          # Rename .dmg or .app files for macOS
          if [ -d "macos" ]; then
            for app in macos/*.app; do
              echo "Processing $app"
              mv "$app" "macos/app.app"
              cd macos && tar -czf app.app.tar.gz app.app && cd ..
            done
          fi

          if [ -d "dmg" ]; then
            for file in dmg/*.dmg; do
              echo "Processing $file"
              arch="arm64"
              [[ "$file" == *x64* || "$file" == *amd64* ]] && arch="x64"
              mv "$file" "dmg/app_${VERSION}_${arch}.dmg"
            done
          fi

          # Rename Linux artifacts
          if [ -d "appimage" ]; then
            for file in appimage/*.AppImage; do
              arch="arm64"
              [[ "$file" == *amd64* ]] && arch="amd64"
              mv "$file" "appimage/app_${VERSION}_${arch}.AppImage"
              cd appimage && tar -czf app_${VERSION}_${arch}.AppImage.tar.gz app_${VERSION}_${arch}.AppImage && cd ..
            done
          fi

          if [ -d "deb" ]; then
            for file in deb/*.deb; do
              arch="arm64"
              [[ "$file" == *amd64* ]] && arch="amd64"
              mv "$file" "deb/app_${VERSION}_${arch}.deb"
            done
          fi

          # Rename Windows artifacts
          if [ -d "msi" ]; then
            mv msi/*.msi msi/app_${VERSION}_x64.msi || true
          fi
          if [ -d "nsis" ]; then
            mv nsis/*.exe nsis/app_${VERSION}_x64-setup.exe || true
          fi

          echo "Artifacts after rename:"
          find . -type f

      - name: Upload Artifacts to Release
        uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
